(load "account.scm")

(define (make-account-and-serializer balance id-number)
  (define (withdraw amount)
    (if (>= balance amount)
        (begin (set! balance (- balance amount))
               balance)
        "Insufficient funds"))
  (define (deposit amount)
    (set! balance (+ balance amount))
    balance)
  (let ((balance-serializer (make-serializer)))
    (define (dispatch m)
      (cond ((eq? m 'withdraw) withdraw)
            ((eq? m 'deposit) deposit)
            ((eq? m 'balance) balance)
            ((eq? m 'id) id-number)
            ((eq? m 'serializer) balance-serializer)
            (else (error "Unknown request -- MAKE-ACCOUNT" m))))
      dispatch))

(define (find-account-with-id account-id accounts)
  (define (iter accounts)
    (if (null? accounts)
        false
        (if (= ((car accounts) 'id) account-id)
            (car accounts)
            (iter (cdr accounts)))))
  (iter accounts))

(define (serialized-exchange account1 account2)
  (let ((max-id (max (account1 'id) (account2 'id)))
        (min-id (min (account1 'id) (account2 'id)))
        (accounts (list account1 account2)))
    (let ((first-account (find-account-with-id max-id accounts))
          (second-account (find-account-with-id min-id accounts)))
      (let ((serializer1 (first-account 'serializer))
            (serializer2 (second-account 'serializer)))
        ((serializer1 (serializer2 exchange))
         first-account
         second-account)))))

(define acc1 (make-account-and-serializer 50 1))
(define acc2 (make-account-and-serializer 30 2))
(serialized-exchange acc1 acc2)
