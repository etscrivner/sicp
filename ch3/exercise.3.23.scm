(define (make-deque) (cons '() '()))


(define (make-item item before after)
  (cons (cons item before) after))
(define (before-item item)
  (cdr (car item)))
(define (after-item item)
  (cdr item))
(define (value-item item)
  (car (car item)))
(define (set-before-item! item before)
  (set-cdr! (car item) before))
(define (set-after-item! item after)
  (set-cdr! item after))

(define (front-ptr deque) (car deque))
(define (rear-ptr deque) (cdr deque))
(define (set-front-ptr! deque item) (set-car! deque item))
(define (set-rear-ptr! deque item) (set-cdr! deque item))

(define (empty-deque? deque) (null? (front-ptr deque)))

(define (front-deque deque)
  (if (empty-deque? deque)
      (error "FRONT called on empty deque" deque)
      (car (car (front-ptr deque)))))

(define (rear-deque deque)
  (if (empty-deque? deque)
      (error "REAR called on empty deque" deque)
      (car (car (rear-ptr deque)))))

(define (front-insert-deque! deque item)
  (let ((new-pair (make-item item '() '())))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-pair)
           (set-rear-ptr! deque new-pair)
           deque)
          (else
           (set-after-item! new-pair (front-ptr deque))
           (set-before-item! (front-ptr deque) new-pair)
           (set-front-ptr! deque new-pair)
           deque))))

(define (rear-insert-deque! deque item)
  (let ((new-pair (make-item item '() '())))
    (cond ((empty-deque? deque)
           (set-front-ptr! deque new-pair)
           (set-rear-ptr! deque new-pair)
           deque)
          (else
           (set-before-item! new-pair (rear-ptr deque))
           (set-after-item! (rear-ptr deque) new-pair)
           (set-rear-ptr! deque new-pair)
           deque))))

(define (rear-delete-deque! deque)
  (if (empty-deque? deque)
      (error "REAR-DELETE called on empty deque" deque)
      (let ((new-rear-item (before-item (rear-ptr deque))))
        (if (not (null? new-rear-item))
            (set-after-item! new-rear-item '())
            (set-front-ptr! deque new-rear-item))
        (set-rear-ptr! deque new-rear-item)
        deque)))

(define (front-delete-deque! deque)
  (if (empty-deque? deque)
      (error "FRONT-DELETE called on empty deque" deque)
      (let ((new-front-item (after-item (front-ptr deque))))
        (if (not (null? new-front-item))
            (set-before-item! new-front-item '())
            (set-rear-ptr! deque new-front-item))
        (set-front-ptr! deque new-front-item)
        deque)))

(define (print-deque deque)
  (define (iter remaining)
    (if (null? remaining)
        (newline)
        (begin
          (display (value-item remaining))
          (display " ")
          (iter (after-item remaining)))))
  (iter (front-ptr deque)))

(define d1 (make-deque))
(begin
  (front-insert-deque! d1 'a)
  (front-insert-deque! d1 'b)
  (rear-insert-deque! d1 'c)
  (rear-insert-deque! d1 'd)
  'done)
