(load "prob.2.67.scm")

(define (encode message tree)
  (if (null? message)
      '()
      (append (encode-symbol (car message) tree)
              (encode (cdr message) tree))))

(define (encode-symbol symbol tree)
  (define (iter-encode-symbol result current-branch)
    (if (leaf? current-branch)
        result
        (let ((lb (left-branch current-branch))
              (rb (right-branch current-branch)))
          (if (memq symbol (symbols lb))
              (iter-encode-symbol (append result '(0)) lb)
              (iter-encode-symbol (append result '(1)) rb)))))
  (if (not (memq symbol (symbols tree)))
      (error "invalid symbol -- ENCODE-SYMBOL")
      (iter-encode-symbol '() tree)))
