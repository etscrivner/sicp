(define (make-frame-segment var val)
  (cons var val))
(define (frame-segment-variable segment) (car segment))
(define (frame-segment-value segment) (cdr segment))

(define (make-frame variables values)
  (map make-frame-segment variables values))
(define (add-binding-to-frame! var val frame)
  (set-cdr! frame (append (cdr frame)
                          (list (make-frame-segment var val)))))

(define (extend-environment vars vals base-env)
  (if (= (length vars) (length vals))
      (cons (make-frame vars vals) base-env)
      (if (< (length vars) (length vals))
          (error "Too many arguments supplied" vars vals)
          (error "Too few arguments supplied" vars vals))))

(define (lookup-variable-value var env)
  (if (eq? env the-empty-environment)
      (error "Unbound variable" var)
      (let ((result (filter (lambda (x) (eq? var (car x)))
                            (first-frame env))))
        (if (not (null? result))
            (cdar result)
            (lookup-variable-value var (enclosing-environment env))))))

(define (set-variable-value! var val env)
  (if (eq? env the-empty-environment)
      (error "Unbound variable" var)
      (let ((result (filter (lambda (x) (eq? var (car x)))
                            (first-frame env))))
        (if (not (null? result))
            (set-cdr! (car result) val)
            (set-variable-value! var val (enclosing-environment env))))))

(define (define-variable! var val env)
  (let ((result (filter (lambda (x) (eq? var (car x)))
                        (first-frame env))))
        (if (not (null? result))
            (set-cdr! (car result) val)
            (add-binding-to-frame! var val (first-frame env)))))
